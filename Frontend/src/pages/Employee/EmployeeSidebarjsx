import React, { useState } from 'react';
import { Briefcase, Plus, Users, User, Bell, Search, Settings, LogOut, Menu, X } from 'lucide-react';

// Import components
import Dashboard from './Dashboard.jsx';
import Jobs from './jobs.jsx';
import Applications from './Applications.jsx';
import EmployeeProfile from './EmployeeProfile.jsx';
import Settings from './Setting.jsx';

function EmployeeRoute() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  const [jobs, setJobs] = useState([
    {
      id: '1',
      title: 'Senior React Developer',
      company: 'TechCorp Solutions',
      location: 'Mumbai, India',
      type: 'Full-time',
      salary: '₹15-25 LPA',
      description: 'We are looking for a Senior React Developer to join our dynamic team.',
      requirements: ['5+ years React experience', 'TypeScript', 'Node.js', 'Team leadership'],
      postedDate: '2024-01-15',
      applications: 24,
      status: 'Active'
    },
    {
      id: '2',
      title: 'UI/UX Designer',
      company: 'TechCorp Solutions',
      location: 'Bangalore, India',
      type: 'Full-time',
      salary: '₹8-15 LPA',
      description: 'Creative UI/UX Designer needed for innovative projects.',
      requirements: ['Figma/Adobe XD', 'User Research', 'Prototyping', '3+ years experience'],
      postedDate: '2024-01-10',
      applications: 18,
      status: 'Active'
    }
  ]);

  const [applications, setApplications] = useState([
    {
      id: '1',
      jobId: '1',
      jobTitle: 'Senior React Developer',
      candidateName: 'Arjun Sharma',
      candidateEmail: 'arjun.sharma@email.com',
      candidatePhone: '+91 9876543210',
      experience: '6 years',
      appliedDate: '2024-01-18',
      status: 'Pending',
      resume: 'arjun_sharma_resume.pdf'
    },
    {
      id: '2',
      jobId: '1',
      jobTitle: 'Senior React Developer',
      candidateName: 'Priya Patel',
      candidateEmail: 'priya.patel@email.com',
      candidatePhone: '+91 9876543211',
      experience: '7 years',
      appliedDate: '2024-01-17',
      status: 'Reviewed',
      resume: 'priya_patel_resume.pdf'
    },
    {
      id: '3',
      jobId: '2',
      jobTitle: 'UI/UX Designer',
      candidateName: 'Rahul Kumar',
      candidateEmail: 'rahul.kumar@email.com',
      candidatePhone: '+91 9876543212',
      experience: '4 years',
      appliedDate: '2024-01-16',
      status: 'Accepted',
      resume: 'rahul_kumar_resume.pdf'
    }
  ]);

  const [newJob, setNewJob] = useState({
    title: '',
    location: '',
    type: 'Full-time',
    salary: '',
    description: '',
    requirements: ''
  });

  const [companyProfile, setCompanyProfile] = useState({
    name: 'TechCorp Solutions',
    email: 'hr@techcorp.com',
    phone: '+91 9876543210',
    location: 'Mumbai, India',
    website: 'www.techcorp.com',
    description: 'Leading technology solutions provider focused on innovation and excellence.',
    founded: '2015',
    employees: '500-1000'
  });

  const [settings, setSettings] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
    emailNotifications: true,
    pushNotifications: true,
    applicationAlerts: true,
    weeklyReports: false,
    marketingEmails: false,
    profileVisible: true,
    showCompanyInfo: true,
    allowDirectMessages: true,
    language: 'en',
    timezone: 'Asia/Kolkata',
    currency: 'INR',
    dateFormat: 'DD/MM/YYYY',
    darkMode: false
  });

  const handleJobSubmit = (e) => {
    e.preventDefault();
    const job = {
      id: (jobs.length + 1).toString(),
      title: newJob.title,
      company: companyProfile.name,
      location: newJob.location,
      type: newJob.type,
      salary: newJob.salary,
      description: newJob.description,
      requirements: newJob.requirements.split(',').map(req => req.trim()),
      postedDate: new Date().toISOString().split('T')[0],
      applications: 0,
      status: 'Active'
    };
    setJobs([...jobs, job]);
    setNewJob({ title: '', location: '', type: 'Full-time', salary: '', description: '', requirements: '' });
    setActiveTab('jobs');
  };

  const updateApplicationStatus = (applicationId, newStatus) => {
    setApplications(applications.map(app => 
      app.id === applicationId ? { ...app, status: newStatus } : app
    ));
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';
      case 'Reviewed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';
      case 'Accepted': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';
      case 'Rejected': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';
      case 'Active': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';
      case 'Closed': return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
      case 'Draft': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const pendingApplications = applications.filter(app => app.status === 'Pending').length;

  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setSidebarOpen(false); // Close sidebar on mobile when navigating
  };

  return (
    <div className={`min-h-screen ${settings.darkMode ? 'dark' : ''}`}>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        {/* Header */}
        <header className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40">
          <div className="flex items-center justify-between px-6 py-4">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="lg:hidden p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
              >
                {sidebarOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
              </button>
              <Briefcase className="h-8 w-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">RojgariHub</h1>
              <span className="text-sm text-gray-500 dark:text-gray-400 bg-blue-50 dark:bg-blue-900/20 px-2 py-1 rounded">Employee</span>
            </div>
            <div className="flex items-center space-x-4">
              <button className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
                <Bell className="h-5 w-5" />
              </button>
              <div className="flex items-center space-x-2">
                <div className="h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center">
                  <span className="text-white text-sm font-medium">TC</span>
                </div>
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300 hidden sm:block">{companyProfile.name}</span>
              </div>
            </div>
          </div>
        </header>

        <div className="flex">
          {/* Mobile Sidebar Overlay */}
          {sidebarOpen && (
            <div 
              className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
              onClick={() => setSidebarOpen(false)}
            />
          )}

          {/* Sidebar */}
          <aside className={`
            fixed lg:static inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-sm transform transition-transform duration-300 ease-in-out lg:transform-none
            ${sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
          `}>
            <nav className="p-4 pt-20 lg:pt-4">
              <div className="space-y-2">
                <button
                  onClick={() => handleTabChange('dashboard')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'dashboard' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <Briefcase className="h-5 w-5" />
                  <span className="font-medium">Dashboard</span>
                </button>
                <button
                  onClick={() => handleTabChange('jobs')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'jobs' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <Search className="h-5 w-5" />
                  <span className="font-medium">My Jobs</span>
                </button>
                <button
                  onClick={() => handleTabChange('post-job')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'post-job' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <Plus className="h-5 w-5" />
                  <span className="font-medium">Post Job</span>
                </button>
                <button
                  onClick={() => handleTabChange('applications')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'applications' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <Users className="h-5 w-5" />
                  <span className="font-medium">Applications</span>
                  {pendingApplications > 0 && (
                    <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                      {pendingApplications}
                    </span>
                  )}
                </button>
                <button
                  onClick={() => handleTabChange('profile')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'profile' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <User className="h-5 w-5" />
                  <span className="font-medium">Profile</span>
                </button>
              </div>
              <div className="mt-8 pt-4 border-t border-gray-200 dark:border-gray-700">
                <button 
                  onClick={() => handleTabChange('settings')}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    activeTab === 'settings' ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                  }`}
                >
                  <Settings className="h-5 w-5" />
                  <span className="font-medium">Settings</span>
                </button>
                <button className="w-full flex items-center space-x-3 px-4 py-3 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                  <LogOut className="h-5 w-5" />
                  <span className="font-medium">Logout</span>
                </button>
              </div>
            </nav>
          </aside>

          {/* Main Content */}
          <main className="flex-1 p-6">
            {activeTab === 'dashboard' && (
              <Dashboard 
                jobs={jobs} 
                applications={applications} 
                setActiveTab={setActiveTab} 
                getStatusColor={getStatusColor} 
              />
            )}
            {activeTab === 'jobs' && (
              <Jobs 
                jobs={jobs} 
                setActiveTab={setActiveTab} 
                getStatusColor={getStatusColor} 
              />
            )}
            {activeTab === 'post-job' && (
              <PostJob 
                newJob={newJob} 
                setNewJob={setNewJob} 
                handleJobSubmit={handleJobSubmit} 
                setActiveTab={setActiveTab} 
              />
            )}
            {activeTab === 'applications' && (
              <Applications 
                applications={applications} 
                jobs={jobs} 
                updateApplicationStatus={updateApplicationStatus} 
                getStatusColor={getStatusColor} 
              />
            )}
            {activeTab === 'profile' && (
              <EmployeeProfile 
                companyProfile={companyProfile} 
                setCompanyProfile={setCompanyProfile} 
              />
            )}
            {activeTab === 'settings' && (
              <SettingsPage 
                settings={settings} 
                setSettings={setSettings} 
              />
            )}
          </main>
        </div>
      </div>
    </div>
  );
}

export default EmployeeRoute;